/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface XLARevenueInterface extends utils.Interface {
  functions: {
    "distributor()": FunctionFragment;
    "numberOfRecipients()": FunctionFragment;
    "owner()": FunctionFragment;
    "recipients(uint256)": FunctionFragment;
    "recipientsPercentage(address)": FunctionFragment;
    "redistributeToken(address)": FunctionFragment;
    "removeAll()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDistributor(address)": FunctionFragment;
    "setRecipients(address[],uint256[],string[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "distributor"
      | "numberOfRecipients"
      | "owner"
      | "recipients"
      | "recipientsPercentage"
      | "redistributeToken"
      | "removeAll"
      | "renounceOwnership"
      | "setDistributor"
      | "setRecipients"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "distributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfRecipients",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recipients",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "recipientsPercentage",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "redistributeToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "removeAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecipients",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "distributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfRecipients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recipients", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recipientsPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redistributeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRecipients",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AddRecipient(address,uint256,string)": EventFragment;
    "DistributeToken(address,uint256)": EventFragment;
    "DistributorChanged(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveAll(address[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddRecipient"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributeToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveAll"): EventFragment;
}

export interface AddRecipientEventObject {
  recipient: string;
  percentage: BigNumber;
  name: string;
}
export type AddRecipientEvent = TypedEvent<
  [string, BigNumber, string],
  AddRecipientEventObject
>;

export type AddRecipientEventFilter = TypedEventFilter<AddRecipientEvent>;

export interface DistributeTokenEventObject {
  token: string;
  amount: BigNumber;
}
export type DistributeTokenEvent = TypedEvent<
  [string, BigNumber],
  DistributeTokenEventObject
>;

export type DistributeTokenEventFilter = TypedEventFilter<DistributeTokenEvent>;

export interface DistributorChangedEventObject {
  oldDistributor: string;
  newDistributor: string;
}
export type DistributorChangedEvent = TypedEvent<
  [string, string],
  DistributorChangedEventObject
>;

export type DistributorChangedEventFilter =
  TypedEventFilter<DistributorChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RemoveAllEventObject {
  recipients: string[];
}
export type RemoveAllEvent = TypedEvent<[string[]], RemoveAllEventObject>;

export type RemoveAllEventFilter = TypedEventFilter<RemoveAllEvent>;

export interface XLARevenue extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: XLARevenueInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    distributor(overrides?: CallOverrides): Promise<[string]>;

    numberOfRecipients(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    recipients(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    recipientsPercentage(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    redistributeToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDistributor(
      newDistributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRecipients(
      _newRecipients: PromiseOrValue<string>[],
      _percentages: PromiseOrValue<BigNumberish>[],
      _names: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  distributor(overrides?: CallOverrides): Promise<string>;

  numberOfRecipients(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  recipients(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  recipientsPercentage(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  redistributeToken(
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeAll(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDistributor(
    newDistributor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRecipients(
    _newRecipients: PromiseOrValue<string>[],
    _percentages: PromiseOrValue<BigNumberish>[],
    _names: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    distributor(overrides?: CallOverrides): Promise<string>;

    numberOfRecipients(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    recipients(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    recipientsPercentage(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redistributeToken(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAll(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDistributor(
      newDistributor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRecipients(
      _newRecipients: PromiseOrValue<string>[],
      _percentages: PromiseOrValue<BigNumberish>[],
      _names: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddRecipient(address,uint256,string)"(
      recipient?: null,
      percentage?: null,
      name?: null
    ): AddRecipientEventFilter;
    AddRecipient(
      recipient?: null,
      percentage?: null,
      name?: null
    ): AddRecipientEventFilter;

    "DistributeToken(address,uint256)"(
      token?: null,
      amount?: null
    ): DistributeTokenEventFilter;
    DistributeToken(token?: null, amount?: null): DistributeTokenEventFilter;

    "DistributorChanged(address,address)"(
      oldDistributor?: null,
      newDistributor?: null
    ): DistributorChangedEventFilter;
    DistributorChanged(
      oldDistributor?: null,
      newDistributor?: null
    ): DistributorChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RemoveAll(address[])"(recipients?: null): RemoveAllEventFilter;
    RemoveAll(recipients?: null): RemoveAllEventFilter;
  };

  estimateGas: {
    distributor(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfRecipients(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    recipients(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recipientsPercentage(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redistributeToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDistributor(
      newDistributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRecipients(
      _newRecipients: PromiseOrValue<string>[],
      _percentages: PromiseOrValue<BigNumberish>[],
      _names: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    distributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfRecipients(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recipients(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recipientsPercentage(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redistributeToken(
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDistributor(
      newDistributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRecipients(
      _newRecipients: PromiseOrValue<string>[],
      _percentages: PromiseOrValue<BigNumberish>[],
      _names: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
