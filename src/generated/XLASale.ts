/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface XLASaleInterface extends utils.Interface {
  functions: {
    "AFFILIATE_MANAGER()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "affiliatePartners(bytes32)": FunctionFragment;
    "buyFixedTokenAmount(uint256,bytes32)": FunctionFragment;
    "calculateCost(uint256)": FunctionFragment;
    "exponent()": FunctionFragment;
    "founder()": FunctionFragment;
    "founderReward()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialPriceUSD()": FunctionFragment;
    "k()": FunctionFragment;
    "k2()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "presaleToken()": FunctionFragment;
    "receiverOfEarnings()": FunctionFragment;
    "referralReward()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setAffiliatePartner(bytes32,address)": FunctionFragment;
    "setReceiverOfEarnings(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AFFILIATE_MANAGER"
      | "DEFAULT_ADMIN_ROLE"
      | "affiliatePartners"
      | "buyFixedTokenAmount"
      | "calculateCost"
      | "exponent"
      | "founder"
      | "founderReward"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialPriceUSD"
      | "k"
      | "k2"
      | "pause"
      | "paused"
      | "presaleToken"
      | "receiverOfEarnings"
      | "referralReward"
      | "renounceRole"
      | "revokeRole"
      | "setAffiliatePartner"
      | "setReceiverOfEarnings"
      | "supportsInterface"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "AFFILIATE_MANAGER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "affiliatePartners",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyFixedTokenAmount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateCost",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "exponent", values?: undefined): string;
  encodeFunctionData(functionFragment: "founder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "founderReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialPriceUSD",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "k", values?: undefined): string;
  encodeFunctionData(functionFragment: "k2", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "presaleToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiverOfEarnings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAffiliatePartner",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReceiverOfEarnings",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "AFFILIATE_MANAGER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "affiliatePartners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyFixedTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exponent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "founder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "founderReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialPriceUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "k", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "k2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "presaleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiverOfEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAffiliatePartner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReceiverOfEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "AffiliatePartnerAdded(bytes32,address)": EventFragment;
    "AffiliatePartnerUpdated(bytes32,address,address)": EventFragment;
    "Bought(address,uint256,uint256,uint256,bytes32)": EventFragment;
    "ReceiverOfEarningsChanged(address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AffiliatePartnerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AffiliatePartnerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceiverOfEarningsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface AffiliatePartnerAddedEventObject {
  affCode: string;
  partnerAddress: string;
}
export type AffiliatePartnerAddedEvent = TypedEvent<
  [string, string],
  AffiliatePartnerAddedEventObject
>;

export type AffiliatePartnerAddedEventFilter =
  TypedEventFilter<AffiliatePartnerAddedEvent>;

export interface AffiliatePartnerUpdatedEventObject {
  affcode: string;
  newPartnerAddress: string;
  oldPartnerAddress: string;
}
export type AffiliatePartnerUpdatedEvent = TypedEvent<
  [string, string, string],
  AffiliatePartnerUpdatedEventObject
>;

export type AffiliatePartnerUpdatedEventFilter =
  TypedEventFilter<AffiliatePartnerUpdatedEvent>;

export interface BoughtEventObject {
  buyer: string;
  amount: BigNumber;
  priceEth: BigNumber;
  priceUsd: BigNumber;
  affCode: string;
}
export type BoughtEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string],
  BoughtEventObject
>;

export type BoughtEventFilter = TypedEventFilter<BoughtEvent>;

export interface ReceiverOfEarningsChangedEventObject {
  newReceiver: string;
  oldReceiver: string;
}
export type ReceiverOfEarningsChangedEvent = TypedEvent<
  [string, string],
  ReceiverOfEarningsChangedEventObject
>;

export type ReceiverOfEarningsChangedEventFilter =
  TypedEventFilter<ReceiverOfEarningsChangedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface XLASale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: XLASaleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AFFILIATE_MANAGER(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    affiliatePartners(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    buyFixedTokenAmount(
      _amount: PromiseOrValue<BigNumberish>,
      _affCode: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculateCost(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { cost: BigNumber }>;

    exponent(overrides?: CallOverrides): Promise<[BigNumber]>;

    founder(overrides?: CallOverrides): Promise<[string]>;

    founderReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialPriceUSD(overrides?: CallOverrides): Promise<[BigNumber]>;

    k(overrides?: CallOverrides): Promise<[BigNumber]>;

    k2(overrides?: CallOverrides): Promise<[BigNumber]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    presaleToken(overrides?: CallOverrides): Promise<[string]>;

    receiverOfEarnings(overrides?: CallOverrides): Promise<[string]>;

    referralReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAffiliatePartner(
      _affCode: PromiseOrValue<BytesLike>,
      _partnerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReceiverOfEarnings(
      _receiverOfEarnings: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  AFFILIATE_MANAGER(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  affiliatePartners(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  buyFixedTokenAmount(
    _amount: PromiseOrValue<BigNumberish>,
    _affCode: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculateCost(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  exponent(overrides?: CallOverrides): Promise<BigNumber>;

  founder(overrides?: CallOverrides): Promise<string>;

  founderReward(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialPriceUSD(overrides?: CallOverrides): Promise<BigNumber>;

  k(overrides?: CallOverrides): Promise<BigNumber>;

  k2(overrides?: CallOverrides): Promise<BigNumber>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  presaleToken(overrides?: CallOverrides): Promise<string>;

  receiverOfEarnings(overrides?: CallOverrides): Promise<string>;

  referralReward(overrides?: CallOverrides): Promise<BigNumber>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAffiliatePartner(
    _affCode: PromiseOrValue<BytesLike>,
    _partnerAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReceiverOfEarnings(
    _receiverOfEarnings: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AFFILIATE_MANAGER(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    affiliatePartners(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    buyFixedTokenAmount(
      _amount: PromiseOrValue<BigNumberish>,
      _affCode: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateCost(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exponent(overrides?: CallOverrides): Promise<BigNumber>;

    founder(overrides?: CallOverrides): Promise<string>;

    founderReward(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialPriceUSD(overrides?: CallOverrides): Promise<BigNumber>;

    k(overrides?: CallOverrides): Promise<BigNumber>;

    k2(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    presaleToken(overrides?: CallOverrides): Promise<string>;

    receiverOfEarnings(overrides?: CallOverrides): Promise<string>;

    referralReward(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAffiliatePartner(
      _affCode: PromiseOrValue<BytesLike>,
      _partnerAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReceiverOfEarnings(
      _receiverOfEarnings: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AffiliatePartnerAdded(bytes32,address)"(
      affCode?: null,
      partnerAddress?: null
    ): AffiliatePartnerAddedEventFilter;
    AffiliatePartnerAdded(
      affCode?: null,
      partnerAddress?: null
    ): AffiliatePartnerAddedEventFilter;

    "AffiliatePartnerUpdated(bytes32,address,address)"(
      affcode?: null,
      newPartnerAddress?: null,
      oldPartnerAddress?: null
    ): AffiliatePartnerUpdatedEventFilter;
    AffiliatePartnerUpdated(
      affcode?: null,
      newPartnerAddress?: null,
      oldPartnerAddress?: null
    ): AffiliatePartnerUpdatedEventFilter;

    "Bought(address,uint256,uint256,uint256,bytes32)"(
      buyer?: null,
      amount?: null,
      priceEth?: null,
      priceUsd?: null,
      affCode?: null
    ): BoughtEventFilter;
    Bought(
      buyer?: null,
      amount?: null,
      priceEth?: null,
      priceUsd?: null,
      affCode?: null
    ): BoughtEventFilter;

    "ReceiverOfEarningsChanged(address,address)"(
      newReceiver?: null,
      oldReceiver?: null
    ): ReceiverOfEarningsChangedEventFilter;
    ReceiverOfEarningsChanged(
      newReceiver?: null,
      oldReceiver?: null
    ): ReceiverOfEarningsChangedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    AFFILIATE_MANAGER(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    affiliatePartners(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyFixedTokenAmount(
      _amount: PromiseOrValue<BigNumberish>,
      _affCode: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculateCost(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exponent(overrides?: CallOverrides): Promise<BigNumber>;

    founder(overrides?: CallOverrides): Promise<BigNumber>;

    founderReward(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialPriceUSD(overrides?: CallOverrides): Promise<BigNumber>;

    k(overrides?: CallOverrides): Promise<BigNumber>;

    k2(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    presaleToken(overrides?: CallOverrides): Promise<BigNumber>;

    receiverOfEarnings(overrides?: CallOverrides): Promise<BigNumber>;

    referralReward(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAffiliatePartner(
      _affCode: PromiseOrValue<BytesLike>,
      _partnerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReceiverOfEarnings(
      _receiverOfEarnings: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AFFILIATE_MANAGER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    affiliatePartners(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyFixedTokenAmount(
      _amount: PromiseOrValue<BigNumberish>,
      _affCode: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculateCost(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exponent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    founder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    founderReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialPriceUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    k(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    k2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    presaleToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiverOfEarnings(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referralReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAffiliatePartner(
      _affCode: PromiseOrValue<BytesLike>,
      _partnerAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReceiverOfEarnings(
      _receiverOfEarnings: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
