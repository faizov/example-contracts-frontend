/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace XLARSCWaterfallFactory {
  export type RSCCreateDataStruct = {
    name: PromiseOrValue<string>;
    controller: PromiseOrValue<string>;
    distributor: PromiseOrValue<string>;
    immutableController: PromiseOrValue<boolean>;
    autoEthDistribution: PromiseOrValue<boolean>;
    minAutoDistributeAmount: PromiseOrValue<BigNumberish>;
    initialRecipients: PromiseOrValue<string>[];
    maxCaps: PromiseOrValue<BigNumberish>[];
    priorities: PromiseOrValue<BigNumberish>[];
    names: PromiseOrValue<string>[];
    supportedErc20addresses: PromiseOrValue<string>[];
    erc20PriceFeeds: PromiseOrValue<string>[];
  };

  export type RSCCreateDataStructOutput = [
    string,
    string,
    string,
    boolean,
    boolean,
    BigNumber,
    string[],
    BigNumber[],
    BigNumber[],
    string[],
    string[],
    string[]
  ] & {
    name: string;
    controller: string;
    distributor: string;
    immutableController: boolean;
    autoEthDistribution: boolean;
    minAutoDistributeAmount: BigNumber;
    initialRecipients: string[];
    maxCaps: BigNumber[];
    priorities: BigNumber[];
    names: string[];
    supportedErc20addresses: string[];
    erc20PriceFeeds: string[];
  };

  export type RSCCreateUsdDataStruct = {
    name: PromiseOrValue<string>;
    controller: PromiseOrValue<string>;
    distributor: PromiseOrValue<string>;
    immutableController: PromiseOrValue<boolean>;
    autoEthDistribution: PromiseOrValue<boolean>;
    ethUsdPriceFeed: PromiseOrValue<string>;
    minAutoDistributeAmount: PromiseOrValue<BigNumberish>;
    initialRecipients: PromiseOrValue<string>[];
    maxCaps: PromiseOrValue<BigNumberish>[];
    priorities: PromiseOrValue<BigNumberish>[];
    names: PromiseOrValue<string>[];
    supportedErc20addresses: PromiseOrValue<string>[];
    erc20PriceFeeds: PromiseOrValue<string>[];
  };

  export type RSCCreateUsdDataStructOutput = [
    string,
    string,
    string,
    boolean,
    boolean,
    string,
    BigNumber,
    string[],
    BigNumber[],
    BigNumber[],
    string[],
    string[],
    string[]
  ] & {
    name: string;
    controller: string;
    distributor: string;
    immutableController: boolean;
    autoEthDistribution: boolean;
    ethUsdPriceFeed: string;
    minAutoDistributeAmount: BigNumber;
    initialRecipients: string[];
    maxCaps: BigNumber[];
    priorities: BigNumber[];
    names: string[];
    supportedErc20addresses: string[];
    erc20PriceFeeds: string[];
  };
}

export interface XLAWaterfallFactoryInterface extends utils.Interface {
  functions: {
    "contractImplementation()": FunctionFragment;
    "contractImplementationUsd()": FunctionFragment;
    "createRSCWaterfall((string,address,address,bool,bool,uint256,address[],uint256[],uint256[],string[],address[],address[]))": FunctionFragment;
    "createRSCWaterfallUsd((string,address,address,bool,bool,address,uint256,address[],uint256[],uint256[],string[],address[],address[]))": FunctionFragment;
    "owner()": FunctionFragment;
    "platformFee()": FunctionFragment;
    "platformWallet()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setPlatformFee(uint256)": FunctionFragment;
    "setPlatformWallet(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "contractImplementation"
      | "contractImplementationUsd"
      | "createRSCWaterfall"
      | "createRSCWaterfallUsd"
      | "owner"
      | "platformFee"
      | "platformWallet"
      | "renounceOwnership"
      | "setPlatformFee"
      | "setPlatformWallet"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "contractImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contractImplementationUsd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createRSCWaterfall",
    values: [XLARSCWaterfallFactory.RSCCreateDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createRSCWaterfallUsd",
    values: [XLARSCWaterfallFactory.RSCCreateUsdDataStruct]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "platformWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "contractImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractImplementationUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRSCWaterfall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRSCWaterfallUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "platformWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PlatformFeeChanged(uint256,uint256)": EventFragment;
    "PlatformWalletChanged(address,address)": EventFragment;
    "RSCWaterfallCreated(address,address,address,string,uint256,bool,bool,uint256)": EventFragment;
    "RSCWaterfallUsdCreated(address,address,address,string,uint256,bool,bool,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlatformFeeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PlatformWalletChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RSCWaterfallCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RSCWaterfallUsdCreated"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PlatformFeeChangedEventObject {
  oldFee: BigNumber;
  newFee: BigNumber;
}
export type PlatformFeeChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  PlatformFeeChangedEventObject
>;

export type PlatformFeeChangedEventFilter =
  TypedEventFilter<PlatformFeeChangedEvent>;

export interface PlatformWalletChangedEventObject {
  oldPlatformWallet: string;
  newPlatformWallet: string;
}
export type PlatformWalletChangedEvent = TypedEvent<
  [string, string],
  PlatformWalletChangedEventObject
>;

export type PlatformWalletChangedEventFilter =
  TypedEventFilter<PlatformWalletChangedEvent>;

export interface RSCWaterfallCreatedEventObject {
  contractAddress: string;
  controller: string;
  distributor: string;
  name: string;
  version: BigNumber;
  immutableController: boolean;
  autoEthDistribution: boolean;
  minAutoDistributeAmount: BigNumber;
}
export type RSCWaterfallCreatedEvent = TypedEvent<
  [string, string, string, string, BigNumber, boolean, boolean, BigNumber],
  RSCWaterfallCreatedEventObject
>;

export type RSCWaterfallCreatedEventFilter =
  TypedEventFilter<RSCWaterfallCreatedEvent>;

export interface RSCWaterfallUsdCreatedEventObject {
  contractAddress: string;
  controller: string;
  distributor: string;
  name: string;
  version: BigNumber;
  immutableController: boolean;
  autoEthDistribution: boolean;
  minAutoDistributeAmount: BigNumber;
  ethUsdPriceFeed: string;
}
export type RSCWaterfallUsdCreatedEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    BigNumber,
    boolean,
    boolean,
    BigNumber,
    string
  ],
  RSCWaterfallUsdCreatedEventObject
>;

export type RSCWaterfallUsdCreatedEventFilter =
  TypedEventFilter<RSCWaterfallUsdCreatedEvent>;

export interface XLAWaterfallFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: XLAWaterfallFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    contractImplementation(overrides?: CallOverrides): Promise<[string]>;

    contractImplementationUsd(overrides?: CallOverrides): Promise<[string]>;

    createRSCWaterfall(
      _data: XLARSCWaterfallFactory.RSCCreateDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createRSCWaterfallUsd(
      _data: XLARSCWaterfallFactory.RSCCreateUsdDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    platformFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    platformWallet(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPlatformFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPlatformWallet(
      _platformWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  contractImplementation(overrides?: CallOverrides): Promise<string>;

  contractImplementationUsd(overrides?: CallOverrides): Promise<string>;

  createRSCWaterfall(
    _data: XLARSCWaterfallFactory.RSCCreateDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createRSCWaterfallUsd(
    _data: XLARSCWaterfallFactory.RSCCreateUsdDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  platformFee(overrides?: CallOverrides): Promise<BigNumber>;

  platformWallet(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPlatformFee(
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPlatformWallet(
    _platformWallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    contractImplementation(overrides?: CallOverrides): Promise<string>;

    contractImplementationUsd(overrides?: CallOverrides): Promise<string>;

    createRSCWaterfall(
      _data: XLARSCWaterfallFactory.RSCCreateDataStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    createRSCWaterfallUsd(
      _data: XLARSCWaterfallFactory.RSCCreateUsdDataStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    platformFee(overrides?: CallOverrides): Promise<BigNumber>;

    platformWallet(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setPlatformFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlatformWallet(
      _platformWallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PlatformFeeChanged(uint256,uint256)"(
      oldFee?: null,
      newFee?: null
    ): PlatformFeeChangedEventFilter;
    PlatformFeeChanged(
      oldFee?: null,
      newFee?: null
    ): PlatformFeeChangedEventFilter;

    "PlatformWalletChanged(address,address)"(
      oldPlatformWallet?: null,
      newPlatformWallet?: null
    ): PlatformWalletChangedEventFilter;
    PlatformWalletChanged(
      oldPlatformWallet?: null,
      newPlatformWallet?: null
    ): PlatformWalletChangedEventFilter;

    "RSCWaterfallCreated(address,address,address,string,uint256,bool,bool,uint256)"(
      contractAddress?: null,
      controller?: null,
      distributor?: null,
      name?: null,
      version?: null,
      immutableController?: null,
      autoEthDistribution?: null,
      minAutoDistributeAmount?: null
    ): RSCWaterfallCreatedEventFilter;
    RSCWaterfallCreated(
      contractAddress?: null,
      controller?: null,
      distributor?: null,
      name?: null,
      version?: null,
      immutableController?: null,
      autoEthDistribution?: null,
      minAutoDistributeAmount?: null
    ): RSCWaterfallCreatedEventFilter;

    "RSCWaterfallUsdCreated(address,address,address,string,uint256,bool,bool,uint256,address)"(
      contractAddress?: null,
      controller?: null,
      distributor?: null,
      name?: null,
      version?: null,
      immutableController?: null,
      autoEthDistribution?: null,
      minAutoDistributeAmount?: null,
      ethUsdPriceFeed?: null
    ): RSCWaterfallUsdCreatedEventFilter;
    RSCWaterfallUsdCreated(
      contractAddress?: null,
      controller?: null,
      distributor?: null,
      name?: null,
      version?: null,
      immutableController?: null,
      autoEthDistribution?: null,
      minAutoDistributeAmount?: null,
      ethUsdPriceFeed?: null
    ): RSCWaterfallUsdCreatedEventFilter;
  };

  estimateGas: {
    contractImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    contractImplementationUsd(overrides?: CallOverrides): Promise<BigNumber>;

    createRSCWaterfall(
      _data: XLARSCWaterfallFactory.RSCCreateDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createRSCWaterfallUsd(
      _data: XLARSCWaterfallFactory.RSCCreateUsdDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    platformFee(overrides?: CallOverrides): Promise<BigNumber>;

    platformWallet(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPlatformFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPlatformWallet(
      _platformWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    contractImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractImplementationUsd(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createRSCWaterfall(
      _data: XLARSCWaterfallFactory.RSCCreateDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createRSCWaterfallUsd(
      _data: XLARSCWaterfallFactory.RSCCreateUsdDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    platformFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    platformWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPlatformFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPlatformWallet(
      _platformWallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
