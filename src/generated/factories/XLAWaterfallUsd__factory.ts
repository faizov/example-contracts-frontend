/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  XLAWaterfallUsd,
  XLAWaterfallUsdInterface,
} from "../XLAWaterfallUsd";

const _abi = [
  {
    inputs: [],
    name: "ControllerAlreadyConfiguredError",
    type: "error",
  },
  {
    inputs: [],
    name: "DistributorAlreadyConfiguredError",
    type: "error",
  },
  {
    inputs: [],
    name: "ImmutableControllerError",
    type: "error",
  },
  {
    inputs: [],
    name: "InconsistentDataLengthError",
    type: "error",
  },
  {
    inputs: [],
    name: "NullAddressRecipientError",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyControllerError",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyDistributorError",
    type: "error",
  },
  {
    inputs: [],
    name: "RecipientIsCurrentRecipientError",
    type: "error",
  },
  {
    inputs: [],
    name: "TokenMissingUsdPriceOracle",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferFailedError",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldController",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newController",
        type: "address",
      },
    ],
    name: "ControllerChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "CurrentRecipientFulfilled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "DistributeToken",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldDistributor",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newDistributor",
        type: "address",
      },
    ],
    name: "DistributorChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldEthPriceFeed",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newEthPriceFeed",
        type: "address",
      },
    ],
    name: "EthPriceFeedSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address payable[]",
        name: "recipients",
        type: "address[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "maxCaps",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "priorities",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "string[]",
        name: "names",
        type: "string[]",
      },
    ],
    name: "SetRecipients",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "priceFeed",
        type: "address",
      },
    ],
    name: "TokenPriceFeedSet",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "autoEthDistribution",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "controller",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentRecipient",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "distributor",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "contract IFeeFactory",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "immutableController",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "address",
            name: "distributor",
            type: "address",
          },
          {
            internalType: "address",
            name: "controller",
            type: "address",
          },
          {
            internalType: "bool",
            name: "immutableController",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "autoEthDistribution",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "minAutoDistributionAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "platformFee",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "factoryAddress",
            type: "address",
          },
          {
            internalType: "address[]",
            name: "supportedErc20addresses",
            type: "address[]",
          },
          {
            internalType: "address[]",
            name: "erc20PriceFeeds",
            type: "address[]",
          },
        ],
        internalType: "struct BaseRSCWaterfall.InitContractSetting",
        name: "_settings",
        type: "tuple",
      },
      {
        internalType: "address payable[]",
        name: "_initialRecipients",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "_maxCaps",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "_priorities",
        type: "uint256[]",
      },
      {
        internalType: "string[]",
        name: "_names",
        type: "string[]",
      },
      {
        internalType: "address",
        name: "_ethUsdPriceFeed",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "minAutoDistributionAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "numberOfRecipients",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "platformFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "recipients",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "recipientsData",
    outputs: [
      {
        internalType: "uint256",
        name: "received",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxCap",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "priority",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "redistributeEth",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    name: "redistributeToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_controller",
        type: "address",
      },
    ],
    name: "setController",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_distributor",
        type: "address",
      },
    ],
    name: "setDistributor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_priceFeed",
        type: "address",
      },
    ],
    name: "setEthPriceFeed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable[]",
        name: "_newRecipients",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "_maxCaps",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "_priorities",
        type: "uint256[]",
      },
      {
        internalType: "string[]",
        name: "_names",
        type: "string[]",
      },
    ],
    name: "setRecipients",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_priceFeed",
        type: "address",
      },
    ],
    name: "setTokenUsdPriceFeed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

export class XLAWaterfallUsd__factory {
  static readonly abi = _abi;
  static createInterface(): XLAWaterfallUsdInterface {
    return new utils.Interface(_abi) as XLAWaterfallUsdInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): XLAWaterfallUsd {
    return new Contract(address, _abi, signerOrProvider) as XLAWaterfallUsd;
  }
}
